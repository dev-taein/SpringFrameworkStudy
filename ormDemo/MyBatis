[MyBatis 설정 작업]

 -스프링과 MyBatis 연동을 위하 라이브러리 설정(pom.xml 설정) (실무에서는 Dynamic webProject에서 Maven를 따로 만들음)
  .MyBatis 프레임워크 추가
  .MyBatis-Spring 모듈(라이브러리) 추가 
  .Spring-Jdbc 라이브러리 추가
  
  .spring-test라이브러리 추가
 
 -데이터베이스와 연결을 담당하는 DataSource 객체 설정(Servlet-context.xml 설정)

 
 -MyBatis의 핵심인 SqlSessionFactory 객체 설정(테스트)
 
 
 [스프링 + MyBatis]
 MyBatis-Spring안에 SqlSessionTemplate, MyBatis프레임워크, DataSource가 있다.
 MyBatis프레임워크 안에는 SqlSessionFactory, Mapper가 있다 
 SqlSessionTemplate는 DAO에 정보를 전달함
 DataSource는 SqlSessionFactory에게 정보를 전달함
 Mapper는 DB에게 정보를 전달함.
 
 
 # MyBatis를 이용하는데 있어서 SQL문을 사용하는 방식
 
 1) XML만을 이용해서 SQL문을 설정, DAO에서 XML을 찾아서 실행하는 코드를 작성 (우리나라에서 많이 사용함)
 	-장점: SQL문을 별도의 XML로 작성되기 때문에 수정이나 유지보수가 많은 경우 관리하기 편하다.
 	-단점: 개발 시 코드의 양이 많아진다. 복작성 증가
 	
 2) 어노테이션과 인터페이스만을 이용해서 SQL문을 설정하는 방식
 	-장점: DAO없이도 개발이 가능하기 때문에 생산성이 향상된다.
 	-단점: SQL문을 어노테이션으로 작성하기 때문에 매번 수정할 경우 재컴파일 해야한다.
 
 3) 인터페이스와 XML로 작성된 SQL문을 활용하는 방식
 	-장점: 유연성 있다. 간단한 SQL문은 어노테이션으로, 복잡한 SQL문은 XML로 처리하므로 상황에 따라 처리하는 방식이다.
 	-단점: 유지보수가 많은 프로젝트에서는 부적합하는 방식이다.
 	
 # 1번 방식을 이용해서 개발하는 경우
 	-테이블 생성 및 개발 준비
 	-도메인(쇼핑몰의 회원이나 상품이 필요한데 이런 것들이 하나의 도메인, 즉 개발할때 필요한 중요한 용어나 명사 등) 객체의 설계 및  클래스 작성
 	-DAO 인터페이스 작성
 	-XML Mapper 생성과 SQL문 작성
 	-MyBatis에서 XML Mapper를 인식하도록 설정
 	-DAO 구현(sqlSessionTemplate 설정 및 구현 클래스 작성)